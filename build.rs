// build.rs
use dotenv::from_filename;
use std::env;
use std::fs::File;
use std::io::Write;

const CONFIG_PATH: &str = "app.config";
const ENV_RS_PATH: &str = "./src/env.rs";

fn main() {
    // Make sure cli and web are not both enabled
    if cfg!(feature = "cli") && cfg!(feature = "web") {
        panic!("cli and web features are mutually exclusive");
    }

    if cfg!(target_arch = "wasm32") {
        println!("cargo:rustc-env=EXE_NAME=krondor_web");
    }

    // Load Build Parameters
    println!("cargo:rerun-if-changed=.env.config");
    let mut f = File::create(ENV_RS_PATH).unwrap();
    let version = env!("CARGO_PKG_VERSION");
    from_filename(CONFIG_PATH).ok();

    // Build:

    f.write_all(b"// This file is automatically generated by build.rs\n\n")
        .unwrap();

    f.write_all(b"#![allow(dead_code)]\n\n").unwrap();

    let key = "APP_VERSION";
    let line = format!(
        "pub const {}: &str = \"{}\";\n",
        key,
        version.replace('\"', "\\\"")
    );
    f.write_all(line.as_bytes()).unwrap();

    for (key, value) in env::vars() {
        if key.starts_with("APP_") {
            let line = format!(
                "pub const {}: &str = \"{}\";\n",
                key,
                value.replace('\"', "\\\"")
            );
            f.write_all(line.as_bytes()).unwrap();
        }
    }
}
